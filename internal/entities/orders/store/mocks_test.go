// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package store

import (
	"github.com/arjunksofficial/lumelassignment/internal/entities/orders/models"
	"github.com/arjunksofficial/lumelassignment/pkg/urlquery"
	mock "github.com/stretchr/testify/mock"
)

// NewMockStore creates a new instance of MockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStore {
	mock := &MockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}

type MockStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStore) EXPECT() *MockStore_Expecter {
	return &MockStore_Expecter{mock: &_m.Mock}
}

// BulkCreate provides a mock function for the type MockStore
func (_mock *MockStore) BulkCreate(customers []models.Order) error {
	ret := _mock.Called(customers)

	if len(ret) == 0 {
		panic("no return value specified for BulkCreate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]models.Order) error); ok {
		r0 = returnFunc(customers)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStore_BulkCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkCreate'
type MockStore_BulkCreate_Call struct {
	*mock.Call
}

// BulkCreate is a helper method to define mock.On call
//   - customers []models.Order
func (_e *MockStore_Expecter) BulkCreate(customers interface{}) *MockStore_BulkCreate_Call {
	return &MockStore_BulkCreate_Call{Call: _e.mock.On("BulkCreate", customers)}
}

func (_c *MockStore_BulkCreate_Call) Run(run func(customers []models.Order)) *MockStore_BulkCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []models.Order
		if args[0] != nil {
			arg0 = args[0].([]models.Order)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStore_BulkCreate_Call) Return(err error) *MockStore_BulkCreate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStore_BulkCreate_Call) RunAndReturn(run func(customers []models.Order) error) *MockStore_BulkCreate_Call {
	_c.Call.Return(run)
	return _c
}

// BulkCreateOrUpdate provides a mock function for the type MockStore
func (_mock *MockStore) BulkCreateOrUpdate(customers []models.Order) error {
	ret := _mock.Called(customers)

	if len(ret) == 0 {
		panic("no return value specified for BulkCreateOrUpdate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]models.Order) error); ok {
		r0 = returnFunc(customers)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStore_BulkCreateOrUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkCreateOrUpdate'
type MockStore_BulkCreateOrUpdate_Call struct {
	*mock.Call
}

// BulkCreateOrUpdate is a helper method to define mock.On call
//   - customers []models.Order
func (_e *MockStore_Expecter) BulkCreateOrUpdate(customers interface{}) *MockStore_BulkCreateOrUpdate_Call {
	return &MockStore_BulkCreateOrUpdate_Call{Call: _e.mock.On("BulkCreateOrUpdate", customers)}
}

func (_c *MockStore_BulkCreateOrUpdate_Call) Run(run func(customers []models.Order)) *MockStore_BulkCreateOrUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []models.Order
		if args[0] != nil {
			arg0 = args[0].([]models.Order)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStore_BulkCreateOrUpdate_Call) Return(err error) *MockStore_BulkCreateOrUpdate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStore_BulkCreateOrUpdate_Call) RunAndReturn(run func(customers []models.Order) error) *MockStore_BulkCreateOrUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// RevenueByCategory provides a mock function for the type MockStore
func (_mock *MockStore) RevenueByCategory(filter urlquery.DateRange) ([]models.CategoryRevenue, error) {
	ret := _mock.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for RevenueByCategory")
	}

	var r0 []models.CategoryRevenue
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(urlquery.DateRange) ([]models.CategoryRevenue, error)); ok {
		return returnFunc(filter)
	}
	if returnFunc, ok := ret.Get(0).(func(urlquery.DateRange) []models.CategoryRevenue); ok {
		r0 = returnFunc(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.CategoryRevenue)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(urlquery.DateRange) error); ok {
		r1 = returnFunc(filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_RevenueByCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevenueByCategory'
type MockStore_RevenueByCategory_Call struct {
	*mock.Call
}

// RevenueByCategory is a helper method to define mock.On call
//   - filter urlquery.DateRange
func (_e *MockStore_Expecter) RevenueByCategory(filter interface{}) *MockStore_RevenueByCategory_Call {
	return &MockStore_RevenueByCategory_Call{Call: _e.mock.On("RevenueByCategory", filter)}
}

func (_c *MockStore_RevenueByCategory_Call) Run(run func(filter urlquery.DateRange)) *MockStore_RevenueByCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 urlquery.DateRange
		if args[0] != nil {
			arg0 = args[0].(urlquery.DateRange)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStore_RevenueByCategory_Call) Return(categoryRevenues []models.CategoryRevenue, err error) *MockStore_RevenueByCategory_Call {
	_c.Call.Return(categoryRevenues, err)
	return _c
}

func (_c *MockStore_RevenueByCategory_Call) RunAndReturn(run func(filter urlquery.DateRange) ([]models.CategoryRevenue, error)) *MockStore_RevenueByCategory_Call {
	_c.Call.Return(run)
	return _c
}

// RevenueByProduct provides a mock function for the type MockStore
func (_mock *MockStore) RevenueByProduct(filter urlquery.DateRange) ([]models.ProductRevenue, error) {
	ret := _mock.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for RevenueByProduct")
	}

	var r0 []models.ProductRevenue
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(urlquery.DateRange) ([]models.ProductRevenue, error)); ok {
		return returnFunc(filter)
	}
	if returnFunc, ok := ret.Get(0).(func(urlquery.DateRange) []models.ProductRevenue); ok {
		r0 = returnFunc(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ProductRevenue)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(urlquery.DateRange) error); ok {
		r1 = returnFunc(filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_RevenueByProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevenueByProduct'
type MockStore_RevenueByProduct_Call struct {
	*mock.Call
}

// RevenueByProduct is a helper method to define mock.On call
//   - filter urlquery.DateRange
func (_e *MockStore_Expecter) RevenueByProduct(filter interface{}) *MockStore_RevenueByProduct_Call {
	return &MockStore_RevenueByProduct_Call{Call: _e.mock.On("RevenueByProduct", filter)}
}

func (_c *MockStore_RevenueByProduct_Call) Run(run func(filter urlquery.DateRange)) *MockStore_RevenueByProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 urlquery.DateRange
		if args[0] != nil {
			arg0 = args[0].(urlquery.DateRange)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStore_RevenueByProduct_Call) Return(productRevenues []models.ProductRevenue, err error) *MockStore_RevenueByProduct_Call {
	_c.Call.Return(productRevenues, err)
	return _c
}

func (_c *MockStore_RevenueByProduct_Call) RunAndReturn(run func(filter urlquery.DateRange) ([]models.ProductRevenue, error)) *MockStore_RevenueByProduct_Call {
	_c.Call.Return(run)
	return _c
}

// RevenueByRegion provides a mock function for the type MockStore
func (_mock *MockStore) RevenueByRegion(filter urlquery.DateRange) ([]models.RegionRevenue, error) {
	ret := _mock.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for RevenueByRegion")
	}

	var r0 []models.RegionRevenue
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(urlquery.DateRange) ([]models.RegionRevenue, error)); ok {
		return returnFunc(filter)
	}
	if returnFunc, ok := ret.Get(0).(func(urlquery.DateRange) []models.RegionRevenue); ok {
		r0 = returnFunc(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.RegionRevenue)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(urlquery.DateRange) error); ok {
		r1 = returnFunc(filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_RevenueByRegion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevenueByRegion'
type MockStore_RevenueByRegion_Call struct {
	*mock.Call
}

// RevenueByRegion is a helper method to define mock.On call
//   - filter urlquery.DateRange
func (_e *MockStore_Expecter) RevenueByRegion(filter interface{}) *MockStore_RevenueByRegion_Call {
	return &MockStore_RevenueByRegion_Call{Call: _e.mock.On("RevenueByRegion", filter)}
}

func (_c *MockStore_RevenueByRegion_Call) Run(run func(filter urlquery.DateRange)) *MockStore_RevenueByRegion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 urlquery.DateRange
		if args[0] != nil {
			arg0 = args[0].(urlquery.DateRange)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStore_RevenueByRegion_Call) Return(regionRevenues []models.RegionRevenue, err error) *MockStore_RevenueByRegion_Call {
	_c.Call.Return(regionRevenues, err)
	return _c
}

func (_c *MockStore_RevenueByRegion_Call) RunAndReturn(run func(filter urlquery.DateRange) ([]models.RegionRevenue, error)) *MockStore_RevenueByRegion_Call {
	_c.Call.Return(run)
	return _c
}

// RevenueByTrends provides a mock function for the type MockStore
func (_mock *MockStore) RevenueByTrends(filter urlquery.DateRange) ([]models.TrendRevenue, error) {
	ret := _mock.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for RevenueByTrends")
	}

	var r0 []models.TrendRevenue
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(urlquery.DateRange) ([]models.TrendRevenue, error)); ok {
		return returnFunc(filter)
	}
	if returnFunc, ok := ret.Get(0).(func(urlquery.DateRange) []models.TrendRevenue); ok {
		r0 = returnFunc(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.TrendRevenue)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(urlquery.DateRange) error); ok {
		r1 = returnFunc(filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_RevenueByTrends_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevenueByTrends'
type MockStore_RevenueByTrends_Call struct {
	*mock.Call
}

// RevenueByTrends is a helper method to define mock.On call
//   - filter urlquery.DateRange
func (_e *MockStore_Expecter) RevenueByTrends(filter interface{}) *MockStore_RevenueByTrends_Call {
	return &MockStore_RevenueByTrends_Call{Call: _e.mock.On("RevenueByTrends", filter)}
}

func (_c *MockStore_RevenueByTrends_Call) Run(run func(filter urlquery.DateRange)) *MockStore_RevenueByTrends_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 urlquery.DateRange
		if args[0] != nil {
			arg0 = args[0].(urlquery.DateRange)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStore_RevenueByTrends_Call) Return(trendRevenues []models.TrendRevenue, err error) *MockStore_RevenueByTrends_Call {
	_c.Call.Return(trendRevenues, err)
	return _c
}

func (_c *MockStore_RevenueByTrends_Call) RunAndReturn(run func(filter urlquery.DateRange) ([]models.TrendRevenue, error)) *MockStore_RevenueByTrends_Call {
	_c.Call.Return(run)
	return _c
}

// RevenueTotal provides a mock function for the type MockStore
func (_mock *MockStore) RevenueTotal(filter urlquery.DateRange) (float64, error) {
	ret := _mock.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for RevenueTotal")
	}

	var r0 float64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(urlquery.DateRange) (float64, error)); ok {
		return returnFunc(filter)
	}
	if returnFunc, ok := ret.Get(0).(func(urlquery.DateRange) float64); ok {
		r0 = returnFunc(filter)
	} else {
		r0 = ret.Get(0).(float64)
	}
	if returnFunc, ok := ret.Get(1).(func(urlquery.DateRange) error); ok {
		r1 = returnFunc(filter)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockStore_RevenueTotal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevenueTotal'
type MockStore_RevenueTotal_Call struct {
	*mock.Call
}

// RevenueTotal is a helper method to define mock.On call
//   - filter urlquery.DateRange
func (_e *MockStore_Expecter) RevenueTotal(filter interface{}) *MockStore_RevenueTotal_Call {
	return &MockStore_RevenueTotal_Call{Call: _e.mock.On("RevenueTotal", filter)}
}

func (_c *MockStore_RevenueTotal_Call) Run(run func(filter urlquery.DateRange)) *MockStore_RevenueTotal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 urlquery.DateRange
		if args[0] != nil {
			arg0 = args[0].(urlquery.DateRange)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStore_RevenueTotal_Call) Return(f float64, err error) *MockStore_RevenueTotal_Call {
	_c.Call.Return(f, err)
	return _c
}

func (_c *MockStore_RevenueTotal_Call) RunAndReturn(run func(filter urlquery.DateRange) (float64, error)) *MockStore_RevenueTotal_Call {
	_c.Call.Return(run)
	return _c
}
