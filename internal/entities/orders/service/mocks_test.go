// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"github.com/arjunksofficial/lumelassignment/internal/entities/orders/models"
	"github.com/arjunksofficial/lumelassignment/pkg/core/serror"
	"github.com/arjunksofficial/lumelassignment/pkg/urlquery"
	mock "github.com/stretchr/testify/mock"
)

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// RevenueByCategory provides a mock function for the type MockService
func (_mock *MockService) RevenueByCategory(filter urlquery.DateRange) (models.RevenueByCategoryResp, *serror.ServiceError) {
	ret := _mock.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for RevenueByCategory")
	}

	var r0 models.RevenueByCategoryResp
	var r1 *serror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(urlquery.DateRange) (models.RevenueByCategoryResp, *serror.ServiceError)); ok {
		return returnFunc(filter)
	}
	if returnFunc, ok := ret.Get(0).(func(urlquery.DateRange) models.RevenueByCategoryResp); ok {
		r0 = returnFunc(filter)
	} else {
		r0 = ret.Get(0).(models.RevenueByCategoryResp)
	}
	if returnFunc, ok := ret.Get(1).(func(urlquery.DateRange) *serror.ServiceError); ok {
		r1 = returnFunc(filter)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serror.ServiceError)
		}
	}
	return r0, r1
}

// MockService_RevenueByCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevenueByCategory'
type MockService_RevenueByCategory_Call struct {
	*mock.Call
}

// RevenueByCategory is a helper method to define mock.On call
//   - filter urlquery.DateRange
func (_e *MockService_Expecter) RevenueByCategory(filter interface{}) *MockService_RevenueByCategory_Call {
	return &MockService_RevenueByCategory_Call{Call: _e.mock.On("RevenueByCategory", filter)}
}

func (_c *MockService_RevenueByCategory_Call) Run(run func(filter urlquery.DateRange)) *MockService_RevenueByCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 urlquery.DateRange
		if args[0] != nil {
			arg0 = args[0].(urlquery.DateRange)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockService_RevenueByCategory_Call) Return(revenueByCategoryResp models.RevenueByCategoryResp, serviceError *serror.ServiceError) *MockService_RevenueByCategory_Call {
	_c.Call.Return(revenueByCategoryResp, serviceError)
	return _c
}

func (_c *MockService_RevenueByCategory_Call) RunAndReturn(run func(filter urlquery.DateRange) (models.RevenueByCategoryResp, *serror.ServiceError)) *MockService_RevenueByCategory_Call {
	_c.Call.Return(run)
	return _c
}

// RevenueByProduct provides a mock function for the type MockService
func (_mock *MockService) RevenueByProduct(filter urlquery.DateRange) (models.RevenueByProductResp, *serror.ServiceError) {
	ret := _mock.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for RevenueByProduct")
	}

	var r0 models.RevenueByProductResp
	var r1 *serror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(urlquery.DateRange) (models.RevenueByProductResp, *serror.ServiceError)); ok {
		return returnFunc(filter)
	}
	if returnFunc, ok := ret.Get(0).(func(urlquery.DateRange) models.RevenueByProductResp); ok {
		r0 = returnFunc(filter)
	} else {
		r0 = ret.Get(0).(models.RevenueByProductResp)
	}
	if returnFunc, ok := ret.Get(1).(func(urlquery.DateRange) *serror.ServiceError); ok {
		r1 = returnFunc(filter)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serror.ServiceError)
		}
	}
	return r0, r1
}

// MockService_RevenueByProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevenueByProduct'
type MockService_RevenueByProduct_Call struct {
	*mock.Call
}

// RevenueByProduct is a helper method to define mock.On call
//   - filter urlquery.DateRange
func (_e *MockService_Expecter) RevenueByProduct(filter interface{}) *MockService_RevenueByProduct_Call {
	return &MockService_RevenueByProduct_Call{Call: _e.mock.On("RevenueByProduct", filter)}
}

func (_c *MockService_RevenueByProduct_Call) Run(run func(filter urlquery.DateRange)) *MockService_RevenueByProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 urlquery.DateRange
		if args[0] != nil {
			arg0 = args[0].(urlquery.DateRange)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockService_RevenueByProduct_Call) Return(revenueByProductResp models.RevenueByProductResp, serviceError *serror.ServiceError) *MockService_RevenueByProduct_Call {
	_c.Call.Return(revenueByProductResp, serviceError)
	return _c
}

func (_c *MockService_RevenueByProduct_Call) RunAndReturn(run func(filter urlquery.DateRange) (models.RevenueByProductResp, *serror.ServiceError)) *MockService_RevenueByProduct_Call {
	_c.Call.Return(run)
	return _c
}

// RevenueByRegion provides a mock function for the type MockService
func (_mock *MockService) RevenueByRegion(filter urlquery.DateRange) (models.RevenueByRegionResp, *serror.ServiceError) {
	ret := _mock.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for RevenueByRegion")
	}

	var r0 models.RevenueByRegionResp
	var r1 *serror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(urlquery.DateRange) (models.RevenueByRegionResp, *serror.ServiceError)); ok {
		return returnFunc(filter)
	}
	if returnFunc, ok := ret.Get(0).(func(urlquery.DateRange) models.RevenueByRegionResp); ok {
		r0 = returnFunc(filter)
	} else {
		r0 = ret.Get(0).(models.RevenueByRegionResp)
	}
	if returnFunc, ok := ret.Get(1).(func(urlquery.DateRange) *serror.ServiceError); ok {
		r1 = returnFunc(filter)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serror.ServiceError)
		}
	}
	return r0, r1
}

// MockService_RevenueByRegion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevenueByRegion'
type MockService_RevenueByRegion_Call struct {
	*mock.Call
}

// RevenueByRegion is a helper method to define mock.On call
//   - filter urlquery.DateRange
func (_e *MockService_Expecter) RevenueByRegion(filter interface{}) *MockService_RevenueByRegion_Call {
	return &MockService_RevenueByRegion_Call{Call: _e.mock.On("RevenueByRegion", filter)}
}

func (_c *MockService_RevenueByRegion_Call) Run(run func(filter urlquery.DateRange)) *MockService_RevenueByRegion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 urlquery.DateRange
		if args[0] != nil {
			arg0 = args[0].(urlquery.DateRange)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockService_RevenueByRegion_Call) Return(revenueByRegionResp models.RevenueByRegionResp, serviceError *serror.ServiceError) *MockService_RevenueByRegion_Call {
	_c.Call.Return(revenueByRegionResp, serviceError)
	return _c
}

func (_c *MockService_RevenueByRegion_Call) RunAndReturn(run func(filter urlquery.DateRange) (models.RevenueByRegionResp, *serror.ServiceError)) *MockService_RevenueByRegion_Call {
	_c.Call.Return(run)
	return _c
}

// RevenueByTrends provides a mock function for the type MockService
func (_mock *MockService) RevenueByTrends(filter urlquery.DateRange) (models.RevenueByTrendsResp, *serror.ServiceError) {
	ret := _mock.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for RevenueByTrends")
	}

	var r0 models.RevenueByTrendsResp
	var r1 *serror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(urlquery.DateRange) (models.RevenueByTrendsResp, *serror.ServiceError)); ok {
		return returnFunc(filter)
	}
	if returnFunc, ok := ret.Get(0).(func(urlquery.DateRange) models.RevenueByTrendsResp); ok {
		r0 = returnFunc(filter)
	} else {
		r0 = ret.Get(0).(models.RevenueByTrendsResp)
	}
	if returnFunc, ok := ret.Get(1).(func(urlquery.DateRange) *serror.ServiceError); ok {
		r1 = returnFunc(filter)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serror.ServiceError)
		}
	}
	return r0, r1
}

// MockService_RevenueByTrends_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevenueByTrends'
type MockService_RevenueByTrends_Call struct {
	*mock.Call
}

// RevenueByTrends is a helper method to define mock.On call
//   - filter urlquery.DateRange
func (_e *MockService_Expecter) RevenueByTrends(filter interface{}) *MockService_RevenueByTrends_Call {
	return &MockService_RevenueByTrends_Call{Call: _e.mock.On("RevenueByTrends", filter)}
}

func (_c *MockService_RevenueByTrends_Call) Run(run func(filter urlquery.DateRange)) *MockService_RevenueByTrends_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 urlquery.DateRange
		if args[0] != nil {
			arg0 = args[0].(urlquery.DateRange)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockService_RevenueByTrends_Call) Return(revenueByTrendsResp models.RevenueByTrendsResp, serviceError *serror.ServiceError) *MockService_RevenueByTrends_Call {
	_c.Call.Return(revenueByTrendsResp, serviceError)
	return _c
}

func (_c *MockService_RevenueByTrends_Call) RunAndReturn(run func(filter urlquery.DateRange) (models.RevenueByTrendsResp, *serror.ServiceError)) *MockService_RevenueByTrends_Call {
	_c.Call.Return(run)
	return _c
}

// RevenueTotal provides a mock function for the type MockService
func (_mock *MockService) RevenueTotal(filter urlquery.DateRange) (models.RevenueTotalResp, *serror.ServiceError) {
	ret := _mock.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for RevenueTotal")
	}

	var r0 models.RevenueTotalResp
	var r1 *serror.ServiceError
	if returnFunc, ok := ret.Get(0).(func(urlquery.DateRange) (models.RevenueTotalResp, *serror.ServiceError)); ok {
		return returnFunc(filter)
	}
	if returnFunc, ok := ret.Get(0).(func(urlquery.DateRange) models.RevenueTotalResp); ok {
		r0 = returnFunc(filter)
	} else {
		r0 = ret.Get(0).(models.RevenueTotalResp)
	}
	if returnFunc, ok := ret.Get(1).(func(urlquery.DateRange) *serror.ServiceError); ok {
		r1 = returnFunc(filter)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serror.ServiceError)
		}
	}
	return r0, r1
}

// MockService_RevenueTotal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevenueTotal'
type MockService_RevenueTotal_Call struct {
	*mock.Call
}

// RevenueTotal is a helper method to define mock.On call
//   - filter urlquery.DateRange
func (_e *MockService_Expecter) RevenueTotal(filter interface{}) *MockService_RevenueTotal_Call {
	return &MockService_RevenueTotal_Call{Call: _e.mock.On("RevenueTotal", filter)}
}

func (_c *MockService_RevenueTotal_Call) Run(run func(filter urlquery.DateRange)) *MockService_RevenueTotal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 urlquery.DateRange
		if args[0] != nil {
			arg0 = args[0].(urlquery.DateRange)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockService_RevenueTotal_Call) Return(revenueTotalResp models.RevenueTotalResp, serviceError *serror.ServiceError) *MockService_RevenueTotal_Call {
	_c.Call.Return(revenueTotalResp, serviceError)
	return _c
}

func (_c *MockService_RevenueTotal_Call) RunAndReturn(run func(filter urlquery.DateRange) (models.RevenueTotalResp, *serror.ServiceError)) *MockService_RevenueTotal_Call {
	_c.Call.Return(run)
	return _c
}

// TriggerImport provides a mock function for the type MockService
func (_mock *MockService) TriggerImport() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for TriggerImport")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_TriggerImport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TriggerImport'
type MockService_TriggerImport_Call struct {
	*mock.Call
}

// TriggerImport is a helper method to define mock.On call
func (_e *MockService_Expecter) TriggerImport() *MockService_TriggerImport_Call {
	return &MockService_TriggerImport_Call{Call: _e.mock.On("TriggerImport")}
}

func (_c *MockService_TriggerImport_Call) Run(run func()) *MockService_TriggerImport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockService_TriggerImport_Call) Return(err error) *MockService_TriggerImport_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_TriggerImport_Call) RunAndReturn(run func() error) *MockService_TriggerImport_Call {
	_c.Call.Return(run)
	return _c
}
