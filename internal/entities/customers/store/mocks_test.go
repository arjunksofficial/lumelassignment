// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package store

import (
	"github.com/arjunksofficial/lumelassignment/internal/entities/customers/models"
	mock "github.com/stretchr/testify/mock"
)

// NewMockStore creates a new instance of MockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStore {
	mock := &MockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}

type MockStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStore) EXPECT() *MockStore_Expecter {
	return &MockStore_Expecter{mock: &_m.Mock}
}

// BulkCreate provides a mock function for the type MockStore
func (_mock *MockStore) BulkCreate(customers []models.Customer) error {
	ret := _mock.Called(customers)

	if len(ret) == 0 {
		panic("no return value specified for BulkCreate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]models.Customer) error); ok {
		r0 = returnFunc(customers)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStore_BulkCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkCreate'
type MockStore_BulkCreate_Call struct {
	*mock.Call
}

// BulkCreate is a helper method to define mock.On call
//   - customers []models.Customer
func (_e *MockStore_Expecter) BulkCreate(customers interface{}) *MockStore_BulkCreate_Call {
	return &MockStore_BulkCreate_Call{Call: _e.mock.On("BulkCreate", customers)}
}

func (_c *MockStore_BulkCreate_Call) Run(run func(customers []models.Customer)) *MockStore_BulkCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []models.Customer
		if args[0] != nil {
			arg0 = args[0].([]models.Customer)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStore_BulkCreate_Call) Return(err error) *MockStore_BulkCreate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStore_BulkCreate_Call) RunAndReturn(run func(customers []models.Customer) error) *MockStore_BulkCreate_Call {
	_c.Call.Return(run)
	return _c
}

// BulkCreateOrUpdate provides a mock function for the type MockStore
func (_mock *MockStore) BulkCreateOrUpdate(customers []models.Customer) error {
	ret := _mock.Called(customers)

	if len(ret) == 0 {
		panic("no return value specified for BulkCreateOrUpdate")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func([]models.Customer) error); ok {
		r0 = returnFunc(customers)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockStore_BulkCreateOrUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkCreateOrUpdate'
type MockStore_BulkCreateOrUpdate_Call struct {
	*mock.Call
}

// BulkCreateOrUpdate is a helper method to define mock.On call
//   - customers []models.Customer
func (_e *MockStore_Expecter) BulkCreateOrUpdate(customers interface{}) *MockStore_BulkCreateOrUpdate_Call {
	return &MockStore_BulkCreateOrUpdate_Call{Call: _e.mock.On("BulkCreateOrUpdate", customers)}
}

func (_c *MockStore_BulkCreateOrUpdate_Call) Run(run func(customers []models.Customer)) *MockStore_BulkCreateOrUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 []models.Customer
		if args[0] != nil {
			arg0 = args[0].([]models.Customer)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockStore_BulkCreateOrUpdate_Call) Return(err error) *MockStore_BulkCreateOrUpdate_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockStore_BulkCreateOrUpdate_Call) RunAndReturn(run func(customers []models.Customer) error) *MockStore_BulkCreateOrUpdate_Call {
	_c.Call.Return(run)
	return _c
}
